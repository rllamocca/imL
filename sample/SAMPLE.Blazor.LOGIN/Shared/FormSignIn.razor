@using Microsoft.AspNetCore.Components.Forms;

<h1> Sign in</h1>
<hr />
@if (this.MLocal is not null)
{
    <EditForm Model="@this.MLocal"
          OnInvalidSubmit="(async () => await HandleSubmitAsync(false))"
          OnValidSubmit="(async () => await HandleSubmitAsync(true))">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <h2>🆔 ...</h2>
        <p>
            <label>
                Username:
                <InputText @bind-Value="this.MLocal.Username" />
                <ConcurrencyField Model="@this.MLocal"
                              DbModel="@this.CLocal"
                              Property="_p => _p?.UserName" />
            </label>
            <label>
                Password:
                <InputText @bind-Value="this.MLocal.PassWord" />
                <ConcurrencyField Model="@this.MLocal"
                              DbModel="@this.CLocal"
                              Property="_p => _p?.Password" />
            </label>
            <label>
                Remember:
                <InputCheckbox @bind-Value="this.MLocal.Remember" />
                <ConcurrencyField Model="@this.MLocal"
                              DbModel="@this.CLocal"
                              Property="_p => _p?.Remember" />
            </label>
        </p>

    </EditForm>
}

@*################################################################*@
@code
{
    [Parameter]
    public In_SignIn? MLocal { get; set; }
    [Parameter]
    public In_SignIn? CLocal { get; set; }
    //################################################################

    [Parameter]
    public bool Busy { get; set; }
    [Parameter]
    public EventCallback CancelRequest { get; set; }
    private Task CancelAsync()
    {
        return CancelRequest.InvokeAsync(null);
    }
    [Parameter]
    public EventCallback<bool> ValidationResult { get; set; }
    private Task HandleSubmitAsync(bool isValid)
    {
        return ValidationResult.InvokeAsync(isValid);
    }
}